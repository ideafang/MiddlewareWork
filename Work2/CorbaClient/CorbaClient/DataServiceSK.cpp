// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "DataService.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



DataService_ptr DataService_Helper::_nil() {
	return ::DataService::_nil();
}

::CORBA::Boolean DataService_Helper::is_nil(::DataService_ptr p) {
	return ::CORBA::is_nil(p);

}

void DataService_Helper::release(::DataService_ptr p) {
	::CORBA::release(p);
}

void DataService_Helper::marshalObjRef(::DataService_ptr obj, cdrStream& s) {
	::DataService::_marshalObjRef(obj, s);
}

DataService_ptr DataService_Helper::unmarshalObjRef(cdrStream& s) {
	return ::DataService::_unmarshalObjRef(s);
}

void DataService_Helper::duplicate(::DataService_ptr obj) {
	if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

DataService_ptr
DataService::_duplicate(::DataService_ptr obj)
{
	if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
	return obj;
}

DataService_ptr
DataService::_narrow(::CORBA::Object_ptr obj)
{
	if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
	_ptr_type e = (_ptr_type)obj->_PR_getobj()->_realNarrow(_PD_repoId);
	return e ? e : _nil();
}


DataService_ptr
DataService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
	if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
	_ptr_type e = (_ptr_type)obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
	return e ? e : _nil();
}

DataService_ptr
DataService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
	static _objref_DataService _the_nil_obj;
	return &_the_nil_obj;
#else
	static _objref_DataService* _the_nil_ptr = 0;
	if (!_the_nil_ptr) {
		omni::nilRefLock().lock();
		if (!_the_nil_ptr) {
			_the_nil_ptr = new _objref_DataService;
			registerNilCorbaObject(_the_nil_ptr);
		}
		omni::nilRefLock().unlock();
	}
	return _the_nil_ptr;
#endif
}

const char* DataService::_PD_repoId = "IDL:DataService:1.0";


_objref_DataService::~_objref_DataService() {

}


_objref_DataService::_objref_DataService(omniIOR* ior, omniIdentity* id) :
	omniObjRef(::DataService::_PD_repoId, ior, id, 1)


{
	_PR_setobj(this);
}

void*
_objref_DataService::_ptrToObjRef(const char* id)
{
	if (id == ::DataService::_PD_repoId)
		return (::DataService_ptr) this;

	if (id == ::CORBA::Object::_PD_repoId)
		return (::CORBA::Object_ptr) this;

	if (omni::strMatch(id, ::DataService::_PD_repoId))
		return (::DataService_ptr) this;

	if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
		return (::CORBA::Object_ptr) this;

	return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cfloat
class _0RL_cd_1047B45D413A751C_00000000
	: public omniCallDescriptor
{
public:
	inline _0RL_cd_1047B45D413A751C_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall = 0) :
		omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
	{

	}

	void marshalArguments(cdrStream&);
	void unmarshalArguments(cdrStream&);



	static const char* const _user_exns[];

	::CORBA::String_var arg_0_;
	const char* arg_0;
	::CORBA::String_var arg_1_;
	const char* arg_1;
	::CORBA::Float arg_2;
};

void _0RL_cd_1047B45D413A751C_00000000::marshalArguments(cdrStream& _n)
{
	_n.marshalString(arg_0, 0);
	_n.marshalString(arg_1, 0);
	arg_2 >>= _n;

}

void _0RL_cd_1047B45D413A751C_00000000::unmarshalArguments(cdrStream& _n)
{
	arg_0_ = _n.unmarshalString(0);
	arg_0 = arg_0_.in();
	arg_1_ = _n.unmarshalString(0);
	arg_1 = arg_1_.in();
	(::CORBA::Float&)arg_2 <<= _n;

}

const char* const _0RL_cd_1047B45D413A751C_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1047B45D413A751C_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
	_0RL_cd_1047B45D413A751C_00000000* tcd = (_0RL_cd_1047B45D413A751C_00000000*)cd;
	_impl_DataService* impl = (_impl_DataService*)svnt->_ptrToInterface(DataService::_PD_repoId);
	impl->insert(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void _objref_DataService::insert(const char* stuName, const char* StuNo, ::CORBA::Float score)
{
	_0RL_cd_1047B45D413A751C_00000000 _call_desc(_0RL_lcfn_1047B45D413A751C_10000000, "insert", 7);
	_call_desc.arg_0 = stuName;
	_call_desc.arg_1 = StuNo;
	_call_desc.arg_2 = score;

	_invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cfloat_i_cstring
class _0RL_cd_1047B45D413A751C_20000000
	: public omniCallDescriptor
{
public:
	inline _0RL_cd_1047B45D413A751C_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall = 0) :
		omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
	{

	}

	void marshalArguments(cdrStream&);
	void unmarshalArguments(cdrStream&);

	void unmarshalReturnedValues(cdrStream&);
	void marshalReturnedValues(cdrStream&);


	static const char* const _user_exns[];

	::CORBA::String_var arg_0_;
	const char* arg_0;
	::CORBA::Float result;
};

void _0RL_cd_1047B45D413A751C_20000000::marshalArguments(cdrStream& _n)
{
	_n.marshalString(arg_0, 0);

}

void _0RL_cd_1047B45D413A751C_20000000::unmarshalArguments(cdrStream& _n)
{
	arg_0_ = _n.unmarshalString(0);
	arg_0 = arg_0_.in();

}

void _0RL_cd_1047B45D413A751C_20000000::marshalReturnedValues(cdrStream& _n)
{
	result >>= _n;

}

void _0RL_cd_1047B45D413A751C_20000000::unmarshalReturnedValues(cdrStream& _n)
{
	(::CORBA::Float&)result <<= _n;

}

const char* const _0RL_cd_1047B45D413A751C_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1047B45D413A751C_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
	_0RL_cd_1047B45D413A751C_20000000* tcd = (_0RL_cd_1047B45D413A751C_20000000*)cd;
	_impl_DataService* impl = (_impl_DataService*)svnt->_ptrToInterface(DataService::_PD_repoId);
	tcd->result = impl->search(tcd->arg_0);


}

::CORBA::Float _objref_DataService::search(const char* stuNo)
{
	_0RL_cd_1047B45D413A751C_20000000 _call_desc(_0RL_lcfn_1047B45D413A751C_30000000, "search", 7);
	_call_desc.arg_0 = stuNo;

	_invoke(_call_desc);
	return _call_desc.result;


}
_pof_DataService::~_pof_DataService() {}


omniObjRef*
_pof_DataService::newObjRef(omniIOR* ior, omniIdentity* id)
{
	return new ::_objref_DataService(ior, id);
}


::CORBA::Boolean
_pof_DataService::is_a(const char* id) const
{
	if (omni::ptrStrMatch(id, ::DataService::_PD_repoId))
		return 1;

	return 0;
}

const _pof_DataService _the_pof_DataService;

_impl_DataService::~_impl_DataService() {}


::CORBA::Boolean
_impl_DataService::_dispatch(omniCallHandle& _handle)
{
	const char* op = _handle.operation_name();

	if (omni::strMatch(op, "insert")) {

		_0RL_cd_1047B45D413A751C_00000000 _call_desc(_0RL_lcfn_1047B45D413A751C_10000000, "insert", 7, 1);

		_handle.upcall(this, _call_desc);
		return 1;
	}

	if (omni::strMatch(op, "search")) {

		_0RL_cd_1047B45D413A751C_20000000 _call_desc(_0RL_lcfn_1047B45D413A751C_30000000, "search", 7, 1);

		_handle.upcall(this, _call_desc);
		return 1;
	}


	return 0;
}

void*
_impl_DataService::_ptrToInterface(const char* id)
{
	if (id == ::DataService::_PD_repoId)
		return (::_impl_DataService*) this;

	if (id == ::CORBA::Object::_PD_repoId)
		return (void*)1;

	if (omni::strMatch(id, ::DataService::_PD_repoId))
		return (::_impl_DataService*) this;

	if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
		return (void*)1;
	return 0;
}

const char*
_impl_DataService::_mostDerivedRepoId()
{
	return ::DataService::_PD_repoId;
}

POA_DataService::~POA_DataService() {}

